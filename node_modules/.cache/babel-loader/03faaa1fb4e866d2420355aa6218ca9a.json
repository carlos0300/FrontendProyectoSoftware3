{"ast":null,"code":"'use strict'; // This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\n\nconst u = require('universalify').fromCallback;\n\nconst fs = require('graceful-fs');\n\nconst api = ['access', 'appendFile', 'chmod', 'chown', 'close', 'copyFile', 'fchmod', 'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod', 'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'opendir', 'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rm', 'rmdir', 'stat', 'symlink', 'truncate', 'unlink', 'utimes', 'writeFile'].filter(key => {\n  // Some commands are not available on some systems. Ex:\n  // fs.opendir was added in Node.js v12.12.0\n  // fs.rm was added in Node.js v14.14.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function';\n}); // Export cloned fs:\n\nObject.assign(exports, fs); // Universalify async methods:\n\napi.forEach(method => {\n  exports[method] = u(fs[method]);\n});\nexports.realpath.native = u(fs.realpath.native); // We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\n\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback);\n  }\n\n  return new Promise(resolve => {\n    return fs.exists(filename, resolve);\n  });\n}; // fs.read(), fs.write(), & fs.writev() need special treatment due to multiple callback args\n\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback);\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {\n      if (err) return reject(err);\n      resolve({\n        bytesRead,\n        buffer\n      });\n    });\n  });\n}; // Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\n\n\nexports.write = function (fd, buffer) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write(fd, buffer, ...args);\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {\n      if (err) return reject(err);\n      resolve({\n        bytesWritten,\n        buffer\n      });\n    });\n  });\n}; // fs.writev only available in Node v12.9.0+\n\n\nif (typeof fs.writev === 'function') {\n  // Function signature is\n  // s.writev(fd, buffers[, position], callback)\n  // We need to handle the optional arg, so we use ...args\n  exports.writev = function (fd, buffers) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    if (typeof args[args.length - 1] === 'function') {\n      return fs.writev(fd, buffers, ...args);\n    }\n\n    return new Promise((resolve, reject) => {\n      fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {\n        if (err) return reject(err);\n        resolve({\n          bytesWritten,\n          buffers\n        });\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/carlos/Documents/Software3/FrontendProyectoSoftware3/node_modules/fs-extra/lib/fs/index.js"],"names":["u","require","fromCallback","fs","api","filter","key","Object","assign","exports","forEach","method","realpath","native","exists","filename","callback","Promise","resolve","read","fd","buffer","offset","length","position","reject","err","bytesRead","write","args","bytesWritten","writev","buffers"],"mappings":"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","sourcesContent":["'use strict'\n// This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\n\nconst api = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'close',\n  'copyFile',\n  'fchmod',\n  'fchown',\n  'fdatasync',\n  'fstat',\n  'fsync',\n  'ftruncate',\n  'futimes',\n  'lchmod',\n  'lchown',\n  'link',\n  'lstat',\n  'mkdir',\n  'mkdtemp',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'rename',\n  'rm',\n  'rmdir',\n  'stat',\n  'symlink',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile'\n].filter(key => {\n  // Some commands are not available on some systems. Ex:\n  // fs.opendir was added in Node.js v12.12.0\n  // fs.rm was added in Node.js v14.14.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function'\n})\n\n// Export cloned fs:\nObject.assign(exports, fs)\n\n// Universalify async methods:\napi.forEach(method => {\n  exports[method] = u(fs[method])\n})\nexports.realpath.native = u(fs.realpath.native)\n\n// We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback)\n  }\n  return new Promise(resolve => {\n    return fs.exists(filename, resolve)\n  })\n}\n\n// fs.read(), fs.write(), & fs.writev() need special treatment due to multiple callback args\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback)\n  }\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffer })\n    })\n  })\n}\n\n// Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\nexports.write = function (fd, buffer, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write(fd, buffer, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffer })\n    })\n  })\n}\n\n// fs.writev only available in Node v12.9.0+\nif (typeof fs.writev === 'function') {\n  // Function signature is\n  // s.writev(fd, buffers[, position], callback)\n  // We need to handle the optional arg, so we use ...args\n  exports.writev = function (fd, buffers, ...args) {\n    if (typeof args[args.length - 1] === 'function') {\n      return fs.writev(fd, buffers, ...args)\n    }\n\n    return new Promise((resolve, reject) => {\n      fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {\n        if (err) return reject(err)\n        resolve({ bytesWritten, buffers })\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}