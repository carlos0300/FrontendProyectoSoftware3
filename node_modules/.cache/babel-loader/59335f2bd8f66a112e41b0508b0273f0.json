{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromCallback;\n\nconst path = require('path');\n\nconst fs = require('../fs');\n\nconst _mkdirs = require('../mkdirs');\n\nconst mkdirs = _mkdirs.mkdirs;\nconst mkdirsSync = _mkdirs.mkdirsSync;\n\nconst _symlinkPaths = require('./symlink-paths');\n\nconst symlinkPaths = _symlinkPaths.symlinkPaths;\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\n\nconst _symlinkType = require('./symlink-type');\n\nconst symlinkType = _symlinkType.symlinkType;\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync;\n\nconst pathExists = require('../path-exists').pathExists;\n\nconst {\n  areIdentical\n} = require('../util/stat');\n\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([fs.stat(srcpath), fs.stat(dstpath)]).then(_ref => {\n        let [srcStat, dstStat] = _ref;\n        if (areIdentical(srcStat, dstStat)) return callback(null);\n\n        _createSymlink(srcpath, dstpath, type, callback);\n      });\n    } else _createSymlink(srcpath, dstpath, type, callback);\n  });\n}\n\nfunction _createSymlink(srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err);\n    srcpath = relative.toDst;\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err);\n      const dir = path.dirname(dstpath);\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err);\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n        mkdirs(dir, err => {\n          if (err) return callback(err);\n          fs.symlink(srcpath, dstpath, type, callback);\n        });\n      });\n    });\n  });\n}\n\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  let stats;\n\n  try {\n    stats = fs.lstatSync(dstpath);\n  } catch {}\n\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath);\n    const dstStat = fs.statSync(dstpath);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  const dir = path.dirname(dstpath);\n  const exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n};","map":{"version":3,"sources":["/home/carlos/Documents/Software3/FrontendProyectoSoftware3/node_modules/fs-extra/lib/ensure/symlink.js"],"names":["u","require","fromCallback","path","fs","_mkdirs","mkdirs","mkdirsSync","_symlinkPaths","symlinkPaths","symlinkPathsSync","_symlinkType","symlinkType","symlinkTypeSync","pathExists","areIdentical","createSymlink","srcpath","dstpath","type","callback","lstat","err","stats","isSymbolicLink","Promise","all","stat","then","srcStat","dstStat","_createSymlink","relative","toDst","toCwd","dir","dirname","dirExists","symlink","createSymlinkSync","lstatSync","statSync","exists","existsSync","symlinkSync","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('../fs')\nconst _mkdirs = require('../mkdirs')\nconst mkdirs = _mkdirs.mkdirs\nconst mkdirsSync = _mkdirs.mkdirsSync\n\nconst _symlinkPaths = require('./symlink-paths')\nconst symlinkPaths = _symlinkPaths.symlinkPaths\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nconst _symlinkType = require('./symlink-type')\nconst symlinkType = _symlinkType.symlinkType\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nconst pathExists = require('../path-exists').pathExists\n\nconst { areIdentical } = require('../util/stat')\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([\n        fs.stat(srcpath),\n        fs.stat(dstpath)\n      ]).then(([srcStat, dstStat]) => {\n        if (areIdentical(srcStat, dstStat)) return callback(null)\n        _createSymlink(srcpath, dstpath, type, callback)\n      })\n    } else _createSymlink(srcpath, dstpath, type, callback)\n  })\n}\n\nfunction _createSymlink (srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err)\n    srcpath = relative.toDst\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err)\n      const dir = path.dirname(dstpath)\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err)\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n        mkdirs(dir, err => {\n          if (err) return callback(err)\n          fs.symlink(srcpath, dstpath, type, callback)\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n"]},"metadata":{},"sourceType":"script"}