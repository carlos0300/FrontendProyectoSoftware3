{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst fs = require('graceful-fs');\n\nconst pathExists = require('../path-exists').pathExists;\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\n\nfunction symlinkPaths(srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, err => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink');\n        return callback(err);\n      }\n\n      return callback(null, {\n        toCwd: srcpath,\n        toDst: srcpath\n      });\n    });\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err);\n\n      if (exists) {\n        return callback(null, {\n          toCwd: relativeToDst,\n          toDst: srcpath\n        });\n      } else {\n        return fs.lstat(srcpath, err => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink');\n            return callback(err);\n          }\n\n          return callback(null, {\n            toCwd: srcpath,\n            toDst: path.relative(dstdir, srcpath)\n          });\n        });\n      }\n    });\n  }\n}\n\nfunction symlinkPathsSync(srcpath, dstpath) {\n  let exists;\n\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath);\n    if (!exists) throw new Error('absolute srcpath does not exist');\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    };\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    exists = fs.existsSync(relativeToDst);\n\n    if (exists) {\n      return {\n        toCwd: relativeToDst,\n        toDst: srcpath\n      };\n    } else {\n      exists = fs.existsSync(srcpath);\n      if (!exists) throw new Error('relative srcpath does not exist');\n      return {\n        toCwd: srcpath,\n        toDst: path.relative(dstdir, srcpath)\n      };\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n};","map":{"version":3,"sources":["/home/carlos/Documents/Software3/FrontendProyectoSoftware3/node_modules/fs-extra/lib/ensure/symlink-paths.js"],"names":["path","require","fs","pathExists","symlinkPaths","srcpath","dstpath","callback","isAbsolute","lstat","err","message","replace","toCwd","toDst","dstdir","dirname","relativeToDst","join","exists","relative","symlinkPathsSync","existsSync","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        toCwd: srcpath,\n        toDst: srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          toCwd: relativeToDst,\n          toDst: srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            toCwd: srcpath,\n            toDst: path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        toCwd: relativeToDst,\n        toDst: srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        toCwd: srcpath,\n        toDst: path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"]},"metadata":{},"sourceType":"script"}